Introduction
============

Multiple Projects
-----------------
In the real world, many companies have teams working on multiple projects at 
the same time, and the priorities of one project may interfere with the 
priorities of another.  Other agile planning systems typically treat each 
project as being in its own universe -- so if you have a team working on 
multiple projects, there's no way to say which project's tasks get priority 
over another project's tasks.  This makes it nearly impossible to plan 
milestones for any project.  This system aims to make this easier by allowing 
tasks to be prioritized among tasks from any other project.


Handling Unexpected Work
------------------------
Another aspect of doing agency work in the real world is that we never have 
100% efficiency.  That is, we can never count on 100% of our resources' time 
to go towards planned projects. This is the type of work that eats into our 
velocity_.  This system provides a tool for tracking this type of work in the 
Tickets module. Tickets are used for anything that comes up during the week 
that are somewhat urgent, and need to be resolved before the iteration is 
over. 

Sometimes requests may be generated by a client, and feedback on when that 
request can be done might be required as soon as possible.  A task can be 
created from within a ticket.

----

Agile Planning
==============
The goal of this system is to be flexible enough to be adapted to any agile 
method, wheather it be scrum, kanban, a mix of both, or something else.  The 
idea is to allow teams to explore and find what method works for them.

Iterations
----------
In agile, an iteration is a full software development cycle which includes 
requirements analysis, design, coding, unit testing, and acceptance testing. 
Releases are typically planned at the end of each iteration. 

Different projects may have different iteration lengths. Because of this, our 
system uses a "base iteration" (typically 7 days) that all projects can 
follow. The actual project owner can plan sprint meetings, deadlines, and 
release milestones as needed, however they must make sure to keep these 
within the project's actual lifecycle requirements. For example, if a project 
has a four-week cycle, the release milestones should only be created at the 
end of every four weeks.

A project owner may choose to use less strict processes around a project. For 
example, if you have a project that is mostly centered around maintenance and 
infrequent feature requests, you don't typically need to worry about releases 
and milestones around just one task.  If needed, a deadline can be assigned 
to an individual task.

----

Terminology
===========

task
----
A task is work that requires planning. A task starts out as unscheduled, 
which mean it has not been prioritized.  As soon as a task is assigned a 
priority it goes into the backlog_.  In order to for a task to be 
prioritized, it must also have an effort_ estimate.  A task may have a 
zero-point estimate, but these should typically only be reserved for bugs, 
chores, and milestones_.

backlog
-------
Any work that is scheduled outside of the current iteration.

iteration
---------
The base length of time, typically one week, within which tasks are grouped. 
This is not to be confused with project iteration, which is based on the 
business process chosen for the lifecycle a specific project. See Iterations_ 
for more information.

velocity
--------
The amount of available effort_ a team can contribute towards finishing tasks 
during a certain amount of time. Velocity can be estimated by the number of 
effort points_ that were completed in a given unit of calendar time (e.g., on 
average, a team of 2 developers may complete 20 points per week).

effort
------
An estimate in points_ of the effort required to complete a task.  Effort is 
estimated in points, rather than a unit of time. Research shows that we are 
not very good at estimating effort in terms of hours, and that hours do not 
work well as a unit of production.

points
------
Units of production in which effort_ and velocity_ are measured. 

milestone
---------
A milestone is created as a zero-point task with a deadline.  A milestone 
task can be prioritized like any other task.  This allows us to create a 
deadline for a certain group of tasks to be completed. A milestone is usually 
placed after the last task required for that deadline. The system will 
display warnings if a milestone is pushed beyond it's designated date.

team
----
A team is a resource which is available to work on tasks_.  Teams should be 
designated not by the projects they work on, but rather the type of work they
do. For example, an organization might have a development team and a creative
team.  These teams may have different velocities based on the nature of their
work.


.. _milestones: milestone_
.. _tasks: task_
